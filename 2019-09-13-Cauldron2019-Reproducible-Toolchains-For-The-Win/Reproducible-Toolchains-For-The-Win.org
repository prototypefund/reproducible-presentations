#+AUTHOR: Vagrant Cascadian
#+TITLE: Reproducible Toolchains For The Win!
#+EMAIL: vagrant@reproducible-builds.org 
#+DATE: Cauldron 2019, 2019-09-13
#+LANGUAGE:  en
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: ^:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+LaTeX_CLASS_OPTIONS: [aspectratio=169]
#+BEGIN_comment
Proposal for Cauldron2019
https://gcc.gnu.org/wiki/cauldron2019

Reproducible Toolchains For The Win!

The Reproducible Builds project promotes a set of software development
practices that create an independently-verifiable path from source to
binary code, by providing bit-for-bit identical results.

A key component in building software are the toolchains used. Solving
reproducibility issues at the toolchain level can sometimes fix
thousands of bugs in a single place, rather than patching each
individual affected package.

As an interesting side-effect, Reproducible Builds can also assist in
verifying license compliance.

This talk will mention some of the past and current issues in
toolchains needed to realize Reproducible Builds in the real world.
Let's work together to fix outstanding issues and further these
efforts!

https://reproducible-builds.org
#+END_comment

* Who

** image
    :PROPERTIES:
    :BEAMER_col: 0.2
    :END:

[[./images/vagrantupsidedown.png]]


** text
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

  |                     | Vagrant |
  |---------------------+---------|
  | debian user         |    2001 |
  | debian developer    |    2010 |
  | reproducible builds |    2015 |

* When we say reproducible

  https://reproducible-builds.org/docs/definition/

** text
    :PROPERTIES:
    :BEAMER_col: 0.7
    :END:

A build is reproducible if given the same source code, build
environment and build instructions, any party can recreate bit-by-bit
identical copies of all specified artifacts.

** image
    :PROPERTIES:
    :BEAMER_col: 0.3
    :END:

[[./images/reproducible-builds.png]]

* The problem is one of Time

https://reproducible-builds.org/docs/source-date-epoch/

* gcc: time

Support for SOURCE_DATE_EPOCH added to gcc 2019-04:

https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e3e8c48c4a494d9da741c1c8ea6c4c0b7c4ff934

* Build Paths

https://reproducible-builds.org/specs/build-path-prefix-map/

* gcc: build paths

https://tests.reproducible-builds.org/debian/issues/unstable/gcc_captures_build_path_issue.html

618: reproducible (possibly due to -ffile-prefix-map)

1015: still unreproducible

* gcc: build paths

-debug-prefix-map

* gcc: moar build paths

-fmacro-prefix-map
-ffile-prefix-map

https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70268

* gcc: a block in the road, a line in the sand

https://gcc.gnu.org/ml/gcc-patches/2016-11/msg00182.html
https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00513.html
https://gcc.gnu.org/ml/gcc-patches/2017-07/msg01315.html

* bootstrapping

https://savannah.gnu.org/projects/mes

GNU Mes

* Copyright

  Copyright 2019 Vagrant Cascadian <vagrant@reproducible-builds.org>

  This work is licensed under the Creative Commons
  Attribution-ShareAlike 4.0 International License.

  To view a copy of this license, visit
  https://creativecommons.org/licenses/by-sa/4.0/

* TODO

solved:

https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32342 gzip
https://gitlab.kitware.com/cmake/cmake/merge_requests/432
https://github.com/rpm-software-management/rpm/pull/536
https://github.com/rpm-software-management/rpm/pull/485
https://bugreports.qt.io/browse/QTBUG-62511
https://git.savannah.gnu.org/cgit/make.git/commit/?id=eedea52afb2069e54188508cd87cb7724b30dd6a

open:

https://github.com/ImageMagick/ImageMagick/pull/1270
https://github.com/python/cpython/pull/12341
https://issues.apache.org/jira/browse/MJAVADOC-619 maven-javadoc-plugin
plus more missing java patches
and there is still the whole python py_compile mess left

>> https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32342 gzip
>> https://git.savannah.gnu.org/cgit/make.git/commit/?id=eedea52afb2069e54188508cd87cb7724b30dd6a

[gcc/nvme-cli](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91307 report
LTO-induced indeterminism from global constructors

> _reports/2019-06.md:* Richard Biener submitted a patch for the [GCC
GNU Compiler Collection](https://gcc.gnu.org/) to [fix differences in
the runtime debugging info between
builds](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90778) in its D
programming language support.

* build essential: debian unstable

https://tests.reproducible-builds.org/debian/unstable/amd64/pkg_set_build-essential.html

** image
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

[[./images/unstable-build-essential.png]]

** text
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

of 54 packages:

6 (11.1%) unreproducible: bash+ linux perl# gmp gcc-9 binutils

3 (5.6%) failed to build: pcre2 glibc xz-utils

45 (83.3%) reproducible: ...

* build essential: debian bullseye

https://tests.reproducible-builds.org/debian/bullseye/amd64/pkg_set_build-essential.html

** image
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

[[./images/bullseye-build-essential.png]]

** text
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

53 packages:

1 (1.9%) unreproducible: gcc-9

1 (1.9%) failed to build: xz-utils

1 (1.9%) other problems: libgcrypt20

50 (94.3%) reproducible:: ...
